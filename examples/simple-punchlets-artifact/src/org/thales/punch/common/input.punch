{
  /* This standard punchlet is in charge of storing in normalized elasticsearch document fields
     the input raw data, and metadata added by the Punchplatform first input node (often a syslog spout)

      This is a reference configuration item developed for DAVE 6.1.1 release - 10/10/2020 by CVF
  
  
     The SyslogSpout sends that information using dedicated Storm
     fields. Make sure you subscribe to these fields in your topology 
     configuration.
   
      *  _ppf_id (unique identifier for the log) will be used as Elasticsearch document id ==> not stored in the document itself
               this unique id is key to deduplication of replayed logs (in any case of incident/unstable communication situation).
      *  _ppf_timestamp (timestamp of entry in punchplatform) ==> lmc.input.ts field in the final indexed document.
      *  _ppf_local_host (local binding ip of the networy entry point in punchplatform) ==> col.host.ip field in the final indexed document.
      *  _ppf_local_port (local listening port of the networy entry point in punchplatform) ==> col.host.port field in the final indexed document.
      *  _ppf_remote_host (source ip of the sender/forwarder device that sent the network frame to punchplatform) ==> rep.host.ip field in the final indexed document.
  */


  // To protect the raw log from alteration, and to allow archiving of this raw log without 
  // the associated parsed or enrichment, the raw log is moved to a
  // separate storm field ('raw_log'), that may be appended later to the main json document (before Elasticsearch indexing for example).
  [logs][raw_log] = [logs][log];
  [logs][log][raw_log] = [logs][raw_log];

  // If an input timestamp is available from the input point, it is in milliseconds since Epoch.
  // Let's convert it in a more human-readable format (the backend normally supports insertion
  // of both formats
  if ([logs][_ppf_timestamp]) {
    [logs][log][lmc][input][ts] = date("iso").on([logs][_ppf_timestamp].toString()).get();
  } 

  // computation of the raw log size for statistics purpose in the logs backend
  [logs][log][size] = [logs][raw_log].length();
   

  // Until we know better (with further parsing), the logs collector is the punchplatform entry point
  // and the log reporter is the log sender ip. And the type of log is yet unknown.
  [logs][log][col][host][ip]   = [logs][_ppf_local_host];
  [logs][log][col][host][port] = [logs][_ppf_local_port];
  [logs][log][rep][host][ip]   = [logs][_ppf_remote_host];
  [logs][log][type] = "unknown";
  [logs][log][tenant] = world:[tenant];
  [logs][log][channel] = world:[channel];
  [logs][log][vendor] = world:[meta][vendor];

  // A channel name MAY or MAYNOT be the same as the log 'technology' (apache_httpd, juniper_secure_gateway....).
  // depending on channels mutualization. A custom value can be provided using 'meta.technology' in the punchline)
  
  if ( world:[meta][technology] ) {
    [logs][log][technology] = world:[meta][technology];
  } else {
    [logs][log][technology] = world:[channel];
  }

}
